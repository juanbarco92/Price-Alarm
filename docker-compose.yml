version: '3.8'

services:
  # Base de datos PostgreSQL para desarrollo
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: pricealarm
      POSTGRES_USER: priceuser
      POSTGRES_PASSWORD: pricepass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U priceuser -d pricealarm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para queue system (futuro)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicación web (replicando ambiente Render)
  web:
    build:
      context: .
      dockerfile: infra/Dockerfile.web
    ports:
      - "5000:5000"
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://priceuser:pricepass@db:5432/pricealarm
      - REDIS_URL=redis://redis:6379/0
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=pricealarm
      - DB_USER=priceuser
      - DB_PASSWORD=pricepass
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Solo monta .env para variables, no código fuente (como en producción)
      - ./.env:/app/.env
    command: ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "120", "app.main:create_app()"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Scraper service (programado para ejecutarse cada hora)
  scraper:
    build:
      context: .
      dockerfile: infra/Dockerfile.scraper
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://priceuser:pricepass@db:5432/pricealarm
      - REDIS_URL=redis://redis:6379/0
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=pricealarm
      - DB_USER=priceuser
      - DB_PASSWORD=pricepass
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      # Solo monta .env para variables, no código fuente (como en producción)
      - ./.env:/app/.env
    restart: unless-stopped

  # Cron scheduler (simula el cron job de Render)
  cron-scheduler:
    build:
      context: .
      dockerfile: infra/Dockerfile.scraper
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql://priceuser:pricepass@db:5432/pricealarm
      - REDIS_URL=redis://redis:6379/0
      - TG_TOKEN=${TG_TOKEN}
      - TG_CHAT_ID=${TG_CHAT_ID}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./.env:/app/.env
    # Ejecuta cada 6 horas simulando el cron "0 6,18 * * *"
    command: >
      sh -c "
        echo 'Cron scheduler iniciado. Ejecutando scraping cada 6 horas...'
        while true; do
          echo '[$(date)] Ejecutando scraping programado...'
          python scraper/track.py
          echo '[$(date)] Scraping completado. Esperando 6 horas...'
          sleep 21600
        done
      "
    profiles:
      - cron

volumes:
  postgres_data:
